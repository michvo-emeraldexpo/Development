'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace TMMWebService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CRMDBWebServiceSoap", [Namespace]:="http://magazinemanager.com/webservices/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class CRMDBWebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private authenticateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private queryUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fetchUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private querySalesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fetchSalesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fetchSalesCompleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fetchSalesCompleteByCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private queryProductsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fetchProductsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private queryGoalsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fetchGoalsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private queryRowsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private queryRowsPHPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fetchRowsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fetchRowsByCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private updateRowsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.TMMSynch.My.MySettings.Default.TMMCustomer_TMMWebService_CRMDBWebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event authenticateCompleted As authenticateCompletedEventHandler
        
        '''<remarks/>
        Public Event queryUsersCompleted As queryUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event fetchUsersCompleted As fetchUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event querySalesCompleted As querySalesCompletedEventHandler
        
        '''<remarks/>
        Public Event fetchSalesCompleted As fetchSalesCompletedEventHandler
        
        '''<remarks/>
        Public Event fetchSalesCompleteCompleted As fetchSalesCompleteCompletedEventHandler
        
        '''<remarks/>
        Public Event fetchSalesCompleteByCountCompleted As fetchSalesCompleteByCountCompletedEventHandler
        
        '''<remarks/>
        Public Event queryProductsCompleted As queryProductsCompletedEventHandler
        
        '''<remarks/>
        Public Event fetchProductsCompleted As fetchProductsCompletedEventHandler
        
        '''<remarks/>
        Public Event queryGoalsCompleted As queryGoalsCompletedEventHandler
        
        '''<remarks/>
        Public Event fetchGoalsCompleted As fetchGoalsCompletedEventHandler
        
        '''<remarks/>
        Public Event queryRowsCompleted As queryRowsCompletedEventHandler
        
        '''<remarks/>
        Public Event queryRowsPHPCompleted As queryRowsPHPCompletedEventHandler
        
        '''<remarks/>
        Public Event fetchRowsCompleted As fetchRowsCompletedEventHandler
        
        '''<remarks/>
        Public Event fetchRowsByCountCompleted As fetchRowsByCountCompletedEventHandler
        
        '''<remarks/>
        Public Event updateRowsCompleted As updateRowsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/authenticate", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function authenticate(ByVal strUserName As String, ByVal strPassword As String) As String
            Dim results() As Object = Me.Invoke("authenticate", New Object() {strUserName, strPassword})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub authenticateAsync(ByVal strUserName As String, ByVal strPassword As String)
            Me.authenticateAsync(strUserName, strPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub authenticateAsync(ByVal strUserName As String, ByVal strPassword As String, ByVal userState As Object)
            If (Me.authenticateOperationCompleted Is Nothing) Then
                Me.authenticateOperationCompleted = AddressOf Me.OnauthenticateOperationCompleted
            End If
            Me.InvokeAsync("authenticate", New Object() {strUserName, strPassword}, Me.authenticateOperationCompleted, userState)
        End Sub
        
        Private Sub OnauthenticateOperationCompleted(ByVal arg As Object)
            If (Not (Me.authenticateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent authenticateCompleted(Me, New authenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/queryUsers", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function queryUsers(ByVal strTicket As String, ByVal strSpName As String) As String
            Dim results() As Object = Me.Invoke("queryUsers", New Object() {strTicket, strSpName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub queryUsersAsync(ByVal strTicket As String, ByVal strSpName As String)
            Me.queryUsersAsync(strTicket, strSpName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub queryUsersAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal userState As Object)
            If (Me.queryUsersOperationCompleted Is Nothing) Then
                Me.queryUsersOperationCompleted = AddressOf Me.OnqueryUsersOperationCompleted
            End If
            Me.InvokeAsync("queryUsers", New Object() {strTicket, strSpName}, Me.queryUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnqueryUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.queryUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent queryUsersCompleted(Me, New queryUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/fetchUsers", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function fetchUsers(ByVal strTicket As String, ByVal strRowNum As Integer) As String
            Dim results() As Object = Me.Invoke("fetchUsers", New Object() {strTicket, strRowNum})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fetchUsersAsync(ByVal strTicket As String, ByVal strRowNum As Integer)
            Me.fetchUsersAsync(strTicket, strRowNum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fetchUsersAsync(ByVal strTicket As String, ByVal strRowNum As Integer, ByVal userState As Object)
            If (Me.fetchUsersOperationCompleted Is Nothing) Then
                Me.fetchUsersOperationCompleted = AddressOf Me.OnfetchUsersOperationCompleted
            End If
            Me.InvokeAsync("fetchUsers", New Object() {strTicket, strRowNum}, Me.fetchUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnfetchUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.fetchUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fetchUsersCompleted(Me, New fetchUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/querySales", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function querySales(ByVal strTicket As String, ByVal strSpName As String, ByVal strBusUnit As String, ByVal strProduct As String, ByVal intYear As Integer, ByVal strIssueName As String, ByVal strCommRep As String) As String
            Dim results() As Object = Me.Invoke("querySales", New Object() {strTicket, strSpName, strBusUnit, strProduct, intYear, strIssueName, strCommRep})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub querySalesAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal strBusUnit As String, ByVal strProduct As String, ByVal intYear As Integer, ByVal strIssueName As String, ByVal strCommRep As String)
            Me.querySalesAsync(strTicket, strSpName, strBusUnit, strProduct, intYear, strIssueName, strCommRep, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub querySalesAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal strBusUnit As String, ByVal strProduct As String, ByVal intYear As Integer, ByVal strIssueName As String, ByVal strCommRep As String, ByVal userState As Object)
            If (Me.querySalesOperationCompleted Is Nothing) Then
                Me.querySalesOperationCompleted = AddressOf Me.OnquerySalesOperationCompleted
            End If
            Me.InvokeAsync("querySales", New Object() {strTicket, strSpName, strBusUnit, strProduct, intYear, strIssueName, strCommRep}, Me.querySalesOperationCompleted, userState)
        End Sub
        
        Private Sub OnquerySalesOperationCompleted(ByVal arg As Object)
            If (Not (Me.querySalesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent querySalesCompleted(Me, New querySalesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/fetchSales", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function fetchSales(ByVal strTicket As String, ByVal strRowNum As Integer) As String
            Dim results() As Object = Me.Invoke("fetchSales", New Object() {strTicket, strRowNum})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fetchSalesAsync(ByVal strTicket As String, ByVal strRowNum As Integer)
            Me.fetchSalesAsync(strTicket, strRowNum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fetchSalesAsync(ByVal strTicket As String, ByVal strRowNum As Integer, ByVal userState As Object)
            If (Me.fetchSalesOperationCompleted Is Nothing) Then
                Me.fetchSalesOperationCompleted = AddressOf Me.OnfetchSalesOperationCompleted
            End If
            Me.InvokeAsync("fetchSales", New Object() {strTicket, strRowNum}, Me.fetchSalesOperationCompleted, userState)
        End Sub
        
        Private Sub OnfetchSalesOperationCompleted(ByVal arg As Object)
            If (Not (Me.fetchSalesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fetchSalesCompleted(Me, New fetchSalesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/fetchSalesComplete", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function fetchSalesComplete(ByVal strTicket As String, ByVal strRowNum As Integer) As String
            Dim results() As Object = Me.Invoke("fetchSalesComplete", New Object() {strTicket, strRowNum})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fetchSalesCompleteAsync(ByVal strTicket As String, ByVal strRowNum As Integer)
            Me.fetchSalesCompleteAsync(strTicket, strRowNum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fetchSalesCompleteAsync(ByVal strTicket As String, ByVal strRowNum As Integer, ByVal userState As Object)
            If (Me.fetchSalesCompleteOperationCompleted Is Nothing) Then
                Me.fetchSalesCompleteOperationCompleted = AddressOf Me.OnfetchSalesCompleteOperationCompleted
            End If
            Me.InvokeAsync("fetchSalesComplete", New Object() {strTicket, strRowNum}, Me.fetchSalesCompleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnfetchSalesCompleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.fetchSalesCompleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fetchSalesCompleteCompleted(Me, New fetchSalesCompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/fetchSalesCompleteByCount", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function fetchSalesCompleteByCount(ByVal strTicket As String, ByVal strRowNum As Integer, ByVal strRowCnt As Integer) As String
            Dim results() As Object = Me.Invoke("fetchSalesCompleteByCount", New Object() {strTicket, strRowNum, strRowCnt})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fetchSalesCompleteByCountAsync(ByVal strTicket As String, ByVal strRowNum As Integer, ByVal strRowCnt As Integer)
            Me.fetchSalesCompleteByCountAsync(strTicket, strRowNum, strRowCnt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fetchSalesCompleteByCountAsync(ByVal strTicket As String, ByVal strRowNum As Integer, ByVal strRowCnt As Integer, ByVal userState As Object)
            If (Me.fetchSalesCompleteByCountOperationCompleted Is Nothing) Then
                Me.fetchSalesCompleteByCountOperationCompleted = AddressOf Me.OnfetchSalesCompleteByCountOperationCompleted
            End If
            Me.InvokeAsync("fetchSalesCompleteByCount", New Object() {strTicket, strRowNum, strRowCnt}, Me.fetchSalesCompleteByCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnfetchSalesCompleteByCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.fetchSalesCompleteByCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fetchSalesCompleteByCountCompleted(Me, New fetchSalesCompleteByCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/queryProducts", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function queryProducts(ByVal strTicket As String, ByVal strSpName As String, ByVal strBusUnit As String, ByVal strProduct As String, ByVal intYear As Integer, ByVal strIssueName As String) As String
            Dim results() As Object = Me.Invoke("queryProducts", New Object() {strTicket, strSpName, strBusUnit, strProduct, intYear, strIssueName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub queryProductsAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal strBusUnit As String, ByVal strProduct As String, ByVal intYear As Integer, ByVal strIssueName As String)
            Me.queryProductsAsync(strTicket, strSpName, strBusUnit, strProduct, intYear, strIssueName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub queryProductsAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal strBusUnit As String, ByVal strProduct As String, ByVal intYear As Integer, ByVal strIssueName As String, ByVal userState As Object)
            If (Me.queryProductsOperationCompleted Is Nothing) Then
                Me.queryProductsOperationCompleted = AddressOf Me.OnqueryProductsOperationCompleted
            End If
            Me.InvokeAsync("queryProducts", New Object() {strTicket, strSpName, strBusUnit, strProduct, intYear, strIssueName}, Me.queryProductsOperationCompleted, userState)
        End Sub
        
        Private Sub OnqueryProductsOperationCompleted(ByVal arg As Object)
            If (Not (Me.queryProductsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent queryProductsCompleted(Me, New queryProductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/fetchProducts", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function fetchProducts(ByVal strTicket As String, ByVal strRowNum As Integer) As String
            Dim results() As Object = Me.Invoke("fetchProducts", New Object() {strTicket, strRowNum})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fetchProductsAsync(ByVal strTicket As String, ByVal strRowNum As Integer)
            Me.fetchProductsAsync(strTicket, strRowNum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fetchProductsAsync(ByVal strTicket As String, ByVal strRowNum As Integer, ByVal userState As Object)
            If (Me.fetchProductsOperationCompleted Is Nothing) Then
                Me.fetchProductsOperationCompleted = AddressOf Me.OnfetchProductsOperationCompleted
            End If
            Me.InvokeAsync("fetchProducts", New Object() {strTicket, strRowNum}, Me.fetchProductsOperationCompleted, userState)
        End Sub
        
        Private Sub OnfetchProductsOperationCompleted(ByVal arg As Object)
            If (Not (Me.fetchProductsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fetchProductsCompleted(Me, New fetchProductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/queryGoals", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function queryGoals(ByVal strTicket As String, ByVal strSpName As String, ByVal intYear As Integer, ByVal strMonth As String, ByVal strDept As String) As String
            Dim results() As Object = Me.Invoke("queryGoals", New Object() {strTicket, strSpName, intYear, strMonth, strDept})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub queryGoalsAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal intYear As Integer, ByVal strMonth As String, ByVal strDept As String)
            Me.queryGoalsAsync(strTicket, strSpName, intYear, strMonth, strDept, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub queryGoalsAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal intYear As Integer, ByVal strMonth As String, ByVal strDept As String, ByVal userState As Object)
            If (Me.queryGoalsOperationCompleted Is Nothing) Then
                Me.queryGoalsOperationCompleted = AddressOf Me.OnqueryGoalsOperationCompleted
            End If
            Me.InvokeAsync("queryGoals", New Object() {strTicket, strSpName, intYear, strMonth, strDept}, Me.queryGoalsOperationCompleted, userState)
        End Sub
        
        Private Sub OnqueryGoalsOperationCompleted(ByVal arg As Object)
            If (Not (Me.queryGoalsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent queryGoalsCompleted(Me, New queryGoalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/fetchGoals", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function fetchGoals(ByVal strTicket As String, ByVal strRowNum As Integer) As String
            Dim results() As Object = Me.Invoke("fetchGoals", New Object() {strTicket, strRowNum})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fetchGoalsAsync(ByVal strTicket As String, ByVal strRowNum As Integer)
            Me.fetchGoalsAsync(strTicket, strRowNum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fetchGoalsAsync(ByVal strTicket As String, ByVal strRowNum As Integer, ByVal userState As Object)
            If (Me.fetchGoalsOperationCompleted Is Nothing) Then
                Me.fetchGoalsOperationCompleted = AddressOf Me.OnfetchGoalsOperationCompleted
            End If
            Me.InvokeAsync("fetchGoals", New Object() {strTicket, strRowNum}, Me.fetchGoalsOperationCompleted, userState)
        End Sub
        
        Private Sub OnfetchGoalsOperationCompleted(ByVal arg As Object)
            If (Not (Me.fetchGoalsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fetchGoalsCompleted(Me, New fetchGoalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/queryRows", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function queryRows(ByVal strTicket As String, ByVal strSpName As String, ByVal strQueryType As String, ByVal paramList() As Object) As String
            Dim results() As Object = Me.Invoke("queryRows", New Object() {strTicket, strSpName, strQueryType, paramList})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub queryRowsAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal strQueryType As String, ByVal paramList() As Object)
            Me.queryRowsAsync(strTicket, strSpName, strQueryType, paramList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub queryRowsAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal strQueryType As String, ByVal paramList() As Object, ByVal userState As Object)
            If (Me.queryRowsOperationCompleted Is Nothing) Then
                Me.queryRowsOperationCompleted = AddressOf Me.OnqueryRowsOperationCompleted
            End If
            Me.InvokeAsync("queryRows", New Object() {strTicket, strSpName, strQueryType, paramList}, Me.queryRowsOperationCompleted, userState)
        End Sub
        
        Private Sub OnqueryRowsOperationCompleted(ByVal arg As Object)
            If (Not (Me.queryRowsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent queryRowsCompleted(Me, New queryRowsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/queryRowsPHP", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function queryRowsPHP(ByVal strTicket As String, ByVal strSpName As String, ByVal strQueryType As String, ByVal paramList As String) As String
            Dim results() As Object = Me.Invoke("queryRowsPHP", New Object() {strTicket, strSpName, strQueryType, paramList})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub queryRowsPHPAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal strQueryType As String, ByVal paramList As String)
            Me.queryRowsPHPAsync(strTicket, strSpName, strQueryType, paramList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub queryRowsPHPAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal strQueryType As String, ByVal paramList As String, ByVal userState As Object)
            If (Me.queryRowsPHPOperationCompleted Is Nothing) Then
                Me.queryRowsPHPOperationCompleted = AddressOf Me.OnqueryRowsPHPOperationCompleted
            End If
            Me.InvokeAsync("queryRowsPHP", New Object() {strTicket, strSpName, strQueryType, paramList}, Me.queryRowsPHPOperationCompleted, userState)
        End Sub
        
        Private Sub OnqueryRowsPHPOperationCompleted(ByVal arg As Object)
            If (Not (Me.queryRowsPHPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent queryRowsPHPCompleted(Me, New queryRowsPHPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/fetchRows", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function fetchRows(ByVal strTicket As String, ByVal strRowNum As Integer) As String
            Dim results() As Object = Me.Invoke("fetchRows", New Object() {strTicket, strRowNum})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fetchRowsAsync(ByVal strTicket As String, ByVal strRowNum As Integer)
            Me.fetchRowsAsync(strTicket, strRowNum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fetchRowsAsync(ByVal strTicket As String, ByVal strRowNum As Integer, ByVal userState As Object)
            If (Me.fetchRowsOperationCompleted Is Nothing) Then
                Me.fetchRowsOperationCompleted = AddressOf Me.OnfetchRowsOperationCompleted
            End If
            Me.InvokeAsync("fetchRows", New Object() {strTicket, strRowNum}, Me.fetchRowsOperationCompleted, userState)
        End Sub
        
        Private Sub OnfetchRowsOperationCompleted(ByVal arg As Object)
            If (Not (Me.fetchRowsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fetchRowsCompleted(Me, New fetchRowsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/fetchRowsByCount", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function fetchRowsByCount(ByVal strTicket As String, ByVal strRowNum As Integer, ByVal strRowCnt As Integer) As String
            Dim results() As Object = Me.Invoke("fetchRowsByCount", New Object() {strTicket, strRowNum, strRowCnt})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fetchRowsByCountAsync(ByVal strTicket As String, ByVal strRowNum As Integer, ByVal strRowCnt As Integer)
            Me.fetchRowsByCountAsync(strTicket, strRowNum, strRowCnt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fetchRowsByCountAsync(ByVal strTicket As String, ByVal strRowNum As Integer, ByVal strRowCnt As Integer, ByVal userState As Object)
            If (Me.fetchRowsByCountOperationCompleted Is Nothing) Then
                Me.fetchRowsByCountOperationCompleted = AddressOf Me.OnfetchRowsByCountOperationCompleted
            End If
            Me.InvokeAsync("fetchRowsByCount", New Object() {strTicket, strRowNum, strRowCnt}, Me.fetchRowsByCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnfetchRowsByCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.fetchRowsByCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fetchRowsByCountCompleted(Me, New fetchRowsByCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://magazinemanager.com/webservices/updateRows", RequestNamespace:="http://magazinemanager.com/webservices/", ResponseNamespace:="http://magazinemanager.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function updateRows(ByVal strTicket As String, ByVal strSpName As String, ByVal xmlRows As String) As String
            Dim results() As Object = Me.Invoke("updateRows", New Object() {strTicket, strSpName, xmlRows})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub updateRowsAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal xmlRows As String)
            Me.updateRowsAsync(strTicket, strSpName, xmlRows, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub updateRowsAsync(ByVal strTicket As String, ByVal strSpName As String, ByVal xmlRows As String, ByVal userState As Object)
            If (Me.updateRowsOperationCompleted Is Nothing) Then
                Me.updateRowsOperationCompleted = AddressOf Me.OnupdateRowsOperationCompleted
            End If
            Me.InvokeAsync("updateRows", New Object() {strTicket, strSpName, xmlRows}, Me.updateRowsOperationCompleted, userState)
        End Sub
        
        Private Sub OnupdateRowsOperationCompleted(ByVal arg As Object)
            If (Not (Me.updateRowsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent updateRowsCompleted(Me, New updateRowsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub authenticateCompletedEventHandler(ByVal sender As Object, ByVal e As authenticateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class authenticateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub queryUsersCompletedEventHandler(ByVal sender As Object, ByVal e As queryUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class queryUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub fetchUsersCompletedEventHandler(ByVal sender As Object, ByVal e As fetchUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fetchUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub querySalesCompletedEventHandler(ByVal sender As Object, ByVal e As querySalesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class querySalesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub fetchSalesCompletedEventHandler(ByVal sender As Object, ByVal e As fetchSalesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fetchSalesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub fetchSalesCompleteCompletedEventHandler(ByVal sender As Object, ByVal e As fetchSalesCompleteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fetchSalesCompleteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub fetchSalesCompleteByCountCompletedEventHandler(ByVal sender As Object, ByVal e As fetchSalesCompleteByCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fetchSalesCompleteByCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub queryProductsCompletedEventHandler(ByVal sender As Object, ByVal e As queryProductsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class queryProductsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub fetchProductsCompletedEventHandler(ByVal sender As Object, ByVal e As fetchProductsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fetchProductsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub queryGoalsCompletedEventHandler(ByVal sender As Object, ByVal e As queryGoalsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class queryGoalsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub fetchGoalsCompletedEventHandler(ByVal sender As Object, ByVal e As fetchGoalsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fetchGoalsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub queryRowsCompletedEventHandler(ByVal sender As Object, ByVal e As queryRowsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class queryRowsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub queryRowsPHPCompletedEventHandler(ByVal sender As Object, ByVal e As queryRowsPHPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class queryRowsPHPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub fetchRowsCompletedEventHandler(ByVal sender As Object, ByVal e As fetchRowsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fetchRowsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub fetchRowsByCountCompletedEventHandler(ByVal sender As Object, ByVal e As fetchRowsByCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fetchRowsByCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub updateRowsCompletedEventHandler(ByVal sender As Object, ByVal e As updateRowsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class updateRowsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
